/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:459337:
  if (window != null) window.forceClose();
  selectInput("Select a file to process:", "fileSelected");
} //_CODE_:button1:459337:

public void button2_click1(GButton source, GEvent event) { //_CODE_:button2:405944:
  GClip.copy(result);
} //_CODE_:button2:405944:

public void textarea1_change1(GTextArea source, GEvent event) { //_CODE_:textarea1:232572:
  //println("textarea1 - GTextArea >> GEvent." + event + " @ " + millis());
} //_CODE_:textarea1:232572:

public void custom_slider1_change1(GCustomSlider source, GEvent event) { //_CODE_:custom_slider1:266583:
  textarea1.setFont(new Font("Monospaced", Font.PLAIN, custom_slider1.getValueI()));//println("custom_slider1 - GCustomSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:custom_slider1:266583:

public void custom_slider2_change1(GCustomSlider source, GEvent event) { //_CODE_:custom_slider2:771738:
  limitSize = custom_slider2.getValueI();//println("custom_slider2 - GCustomSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:custom_slider2:771738:

public void button3_click1(GButton source, GEvent event) { //_CODE_:button3:799781:
  refresh();//println("button3 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:button3:799781:

public void checkbox1_clicked1(GCheckbox source, GEvent event) { //_CODE_:checkbox1:622501:
  charLim = checkbox1.isSelected() ? 2048 : Integer.MAX_VALUE;//println("checkbox1 - GCheckbox >> GEvent." + event + " @ " + millis());
} //_CODE_:checkbox1:622501:

public void checkbox1_clicked2(GCheckbox source, GEvent event) { //_CODE_:checkbox2:923959:
  //println("checkbox1 - GCheckbox >> GEvent." + event + " @ " + millis());
} //_CODE_:checkbox2:923959:

public void dropList1_click1(GDropList source, GEvent event) { //_CODE_:dropList1:336215:
  //println("dropList1 - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:dropList1:336215:

public void checkbox3_clicked1(GCheckbox source, GEvent event) { //_CODE_:checkbox3:230658:
  //println("checkbox3 - GCheckbox >> GEvent." + event + " @ " + millis());
} //_CODE_:checkbox3:230658:

public void button4_click1(GButton source, GEvent event) { //_CODE_:button4:579678:
  if (selPath != null && selPath != ""/*t != null*/) {
    //t = loadImage(selPath);
    //conv = t;
    conv = loadImage(selPath);
    int dLim = 400;
    dLim = constrain(dLim, 128, 10000);
    if (conv.width > conv.height) conv.resize(dLim, 0);//conv.resize(0, dLim);
    else conv.resize(0, dLim);//conv.resize(dLim, 0);
    //if (conv.width >= displayWidth * 3 / 2) conv.resize(displayWidth * 3 / 2, 0);
    //if (conv.height >= displayHeight * 3 / 2) conv.resize(0, displayHeight * 3 / 2);
    if(window != null) window.forceClose();//window1 = null;
    window = GWindow.getWindow(this, "View image(" + loadImage(selPath).width + "x" + loadImage(selPath).height + ")", 0, 0, conv.width, conv.height, JAVA2D);
    ((JFrame) ((processing.awt.PSurfaceAWT.SmoothCanvas) window.getSurface().getNative()).getFrame()).setIconImage((java.awt.Image) icon.getNative());
    window.noLoop();
    window.setActionOnClose(G4P.CLOSE_WINDOW);
    window.addDrawHandler(this, "windraw1");
    //window1.getSurface().setResizable(true);;
    window.loop();
    //window1.noSmooth();
  }
} //_CODE_:button4:579678:

public void checkbox4_clicked1(GCheckbox source, GEvent event) { //_CODE_:checkbox4:761693:
  if(checkbox4.isSelected()) custom_slider2.setLimits(300, 100, 500);
  else custom_slider2.setLimits(55, 10, 100);
} //_CODE_:checkbox4:761693:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Ascii Art Maker");
  button1 = new GButton(this, 9, 10, 217, 30);
  button1.setText("Pick Image");
  button1.addEventHandler(this, "button1_click1");
  button2 = new GButton(this, 10, 40, 195, 30);
  button2.setText("Copy ASCII Art");
  button2.addEventHandler(this, "button2_click1");
  textarea1 = new GTextArea(this, 12, 154, 650, 660, G4P.SCROLLBARS_BOTH);
  textarea1.setPromptText("Image Preview");
  textarea1.setOpaque(true);
  textarea1.addEventHandler(this, "textarea1_change1");
  custom_slider1 = new GCustomSlider(this, 10, 70, 600, 40, "grey_blue");
  custom_slider1.setShowValue(true);
  custom_slider1.setShowLimits(true);
  custom_slider1.setLimits(25, 1, 50);
  custom_slider1.setNumberFormat(G4P.INTEGER, 0);
  custom_slider1.setOpaque(false);
  custom_slider1.addEventHandler(this, "custom_slider1_change1");
  label1 = new GLabel(this, 610, 70, 50, 40);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Text Size");
  label1.setOpaque(false);
  custom_slider2 = new GCustomSlider(this, 65, 110, 545, 40, "grey_blue");
  custom_slider2.setShowValue(true);
  custom_slider2.setShowLimits(true);
  custom_slider2.setLimits(55, 10, 100);
  custom_slider2.setNumberFormat(G4P.INTEGER, 0);
  custom_slider2.setOpaque(false);
  custom_slider2.addEventHandler(this, "custom_slider2_change1");
  label2 = new GLabel(this, 610, 110, 50, 40);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Limit image size to");
  label2.setOpaque(false);
  button3 = new GButton(this, 443, 10, 217, 30);
  button3.setText("Refresh with new parameters");
  button3.addEventHandler(this, "button3_click1");
  checkbox1 = new GCheckbox(this, 550, 40, 110, 30);
  checkbox1.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox1.setText("cut to Telegram limit?");
  checkbox1.setOpaque(false);
  checkbox1.addEventHandler(this, "checkbox1_clicked1");
  checkbox2 = new GCheckbox(this, 450, 40, 100, 30);
  checkbox2.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox2.setText("invert image?");
  checkbox2.setOpaque(false);
  checkbox2.addEventHandler(this, "checkbox1_clicked2");
  dropList1 = new GDropList(this, 360, 40, 90, 300, 9, 10);
  dropList1.setItems(loadStrings("list_336215"), 7);
  dropList1.addEventHandler(this, "dropList1_click1");
  label3 = new GLabel(this, 305, 40, 55, 30);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("rounding functions");
  label3.setOpaque(false);
  checkbox3 = new GCheckbox(this, 205, 40, 100, 30);
  checkbox3.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox3.setText("add Telegram ad link?");
  checkbox3.setOpaque(false);
  checkbox3.addEventHandler(this, "checkbox3_clicked1");
  checkbox3.setSelected(true);
  button4 = new GButton(this, 227, 10, 215, 30);
  button4.setText("View original image");
  button4.addEventHandler(this, "button4_click1");
  checkbox4 = new GCheckbox(this, 10, 110, 55, 40);
  checkbox4.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox4.setText("set big limits");
  checkbox4.setOpaque(false);
  checkbox4.addEventHandler(this, "checkbox4_clicked1");
}

// Variable declarations 
// autogenerated do not edit
GButton button1; 
GButton button2; 
GTextArea textarea1; 
GCustomSlider custom_slider1; 
GLabel label1; 
GCustomSlider custom_slider2; 
GLabel label2; 
GButton button3; 
GCheckbox checkbox1; 
GCheckbox checkbox2; 
GDropList dropList1; 
GLabel label3; 
GCheckbox checkbox3; 
GButton button4; 
GCheckbox checkbox4; 
